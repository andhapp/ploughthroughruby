<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Plough => Ruby]]></title>
  <link href="Plough => Ruby/atom.xml&#8221; rel=&#8221;self&#8221;/>
  <link href="Plough => Ruby/&#8221;/>
  <updated>2015-01-25T19:41:47+00:00</updated>
  <id>Plough => Ruby/</id>
  <author>
    <name><![CDATA[andHapp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby command line flag for debugging]]></title>
    <link href="Plough => Ruby/2015/01/25/ruby-command-line-flags.html/&#8221;/>
    <updated>2015-01-25T00:00:00+00:00</updated>
    <id>Plough => Ruby/2015/01/25/ruby-command-line-flags</id>
    <content type="html"><![CDATA[<p>Reading open source code is almost always a good idea. Open source code
has the benefit of being reviewed by a lot of committed users and it
just shows one the good patterns of programming. For instance, I once
looked at Arel, and the code demonstrates an exemplary use of visitor
pattern. There isn&#8217;t much code there, yet it manages to achieve so much.</p>

<p>Recently, I was reading some open source code recently and spotted $DEBUG
environment variable in quite a few places. At the time, I thought it
must be something the author used to simplify debugging. But, no, it&#8217;s
defined and used by ruby core. Ruby provides a debug flag (-d or &#8211;debug)
which when used would set the $DEBUG to true.</p>

<p>Try running the following script in irb, pry or whatever else you use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -d -e 'if $DEBUG; puts "Debugging"; end'</span></code></pre></td></tr></table></div></figure>


<p>and you should see something like this as output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUBY_GC_HEAP_FREE_SLOTS=200000 (default value: 4096)
</span><span class='line'>RUBY_GC_MALLOC_LIMIT=90000000 (default value: 16777216)
</span><span class='line'>Exception `LoadError' at /Users/andhapp/.rvm/rubies/ruby-2.2.0/lib/ruby/2.2.0/rubygems.rb:1222 - cannot load such file -- rubygems/defaults/operating_system
</span><span class='line'>Exception `LoadError' at /Users/andhapp/.rvm/rubies/ruby-2.2.0/lib/ruby/2.2.0/rubygems.rb:1231 - cannot load such file -- rubygems/defaults/ruby
</span><span class='line'>Debugging</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t worry about the two exceptions as in <a href="http://stackoverflow.com/a/1851232/20301">debug mode exceptions are displayed</a> even when they are rescued.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Chrome Selenium driver for Capybara when using chrome canary on a Mac]]></title>
    <link href="Plough => Ruby/2014/12/31/setting-up-chrome-selenium-driver-for-capybara-using-chrome-canary-on-a-mac+copy.html/&#8221;/>
    <updated>2014-12-31T00:00:00+00:00</updated>
    <id>Plough => Ruby/2014/12/31/setting-up-chrome-selenium-driver-for-capybara-using-chrome-canary-on-a-mac copy</id>
    <content type="html"><![CDATA[<p>We have been adding Rspec + Capybara to <a href="https://suggestion.io">Suggestion.io</a>
to ensure we don&#8217;t create any regression bugs. There are plenty of resources
online to set-up Capybara to use Selenium&#8217;s Chrome driver (instead of Firefox).</p>

<h3>But, what if you are using Chrome Canary as your browser?</h3>

<p>You would probably see the following error:</p>

<pre>
Selenium::WebDriver::Error::UnknownError: unknown error: cannot find Chrome binary
</pre>


<p>There are two ways to fix this issue:</p>

<h3> Solution 1 - Download Chrome</h3>

<p>Whilst, searching for the solution, I ended up on <a href="https://code.google.com/p/selenium/wiki/ChromeDriver">ChromeDriver&#8217;s wiki</a>.
It clearly states that Chrome driver expects the Chrome binary to be in:</p>

<pre>
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome
</pre>


<p>That&#8217;s exactly where Chrome is installed on a Mac, so, to fix this issue
just download Chrome.</p>

<h3>Solution 2 - Pass the location of Chrome Canary&#8217;s binary to Selenium Chrome Driver via Capybara</h3>

<p>Downloading Chrome just for the sake of passing specs doesn&#8217;t make
sense. Googling revealed that there&#8217;s something called &#8216;ChromeOptions&#8217;, but,
how the hell do I pass that option from Capybara, so that it get&#8217;s passed
correctly to Selenium Chrome driver. After, trawling through the
capybara and selenium-webdriver source, I found a way to pass the location
of Chrome Canary as the binary. Here&#8217;s how:</p>

<pre>
Capybara.register_driver :chrome do |app|
  Capybara::Selenium::Driver.new(app, 
    browser: :chrome, 
    desired_capabilities: {
      "chromeOptions" => {
        "binary" => '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary' 
      } 
    })
end
</pre>


<p>The &#8216;binary&#8217; option specifies the location of Chrome Canary&#8217;s binary on
your Mac.</p>

<p>That was a couple of hours well spent. Hope it helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An unsual thing about kanji(Japanese)]]></title>
    <link href="Plough => Ruby/2014/10/19/an-unusual-thing-about-kanji%28Japanese%29.html/&#8221;/>
    <updated>2014-10-19T00:00:00+01:00</updated>
    <id>Plough => Ruby/2014/10/19/an-unusual-thing-about-kanji(Japanese)</id>
    <content type="html"><![CDATA[<p>Recently, I was reading an article on natural language processing of
Japanese characters and came across something very unusual about the way
Japanese characters are written, there is no delimiters between the
words, for example, if &#8216;Ruby&#8217; and &#8216;Blog&#8217; are two kanji characters then
they will be written as &#8216;RubyBlog&#8217; with no delimiter (space in English)
between them. It makes segmenting Japanese text a lot harder since
combination of characters could mean two entirely different things.</p>

<p>I just found it very fascinating and challenging at the same time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec verifying doubles]]></title>
    <link href="Plough => Ruby/2014/09/20/rspec-verifying-doubles.html/&#8221;/>
    <updated>2014-09-20T00:00:00+01:00</updated>
    <id>Plough => Ruby/2014/09/20/rspec-verifying-doubles</id>
    <content type="html"><![CDATA[<p>RSpec 3 has been full of some good stuff and I have full admiration for
the people behind it. Even the upgrade process was well thought out
keeping in mind the end users. As developers, we are used to handle poor
upgrade process pretty well, but RSpec totally changed my opinion.</p>

<p>Whilst <a href="https://github.com/andhapp/textrazor/pull/4">merging pull request for TextRazor</a>, I decided to upgrade the gem
to RSpec3. I was meant to do that for sometime anyways, and the pull
request opened up the perfect opportunity for it. I stumbled upon a very
interesting new feature in RSpec3, called <a href="https://relishapp.com/rspec/rspec-mocks/v/3-0/docs/verifying-doubles/using-an-instance-double">verifying doubles</a>. This
functionality makes <a href="https://github.com/xaviershay/rspec-fire">rspec-fire</a> totally obsolete. It verifies that any
methods being stubbed would be present on the instance of the class
being stubbed and also the number of argument the method accepts. This
is pretty cool. I always used rspec-fire to make sure that my stubbed
method existed on the class. In the light of these updates, I removed
<a href="https://github.com/andhapp/textrazor/commit/48aeff496be89c7433dadfbbedd3e1d3e4375b64">rspec-fire as a dependency from TextRazor</a>. Makes it even more
lightweight.</p>

<p>Thanks again to RSpec team!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby puts command]]></title>
    <link href="Plough => Ruby/2014/06/15/ruby-puts-command.html/&#8221;/>
    <updated>2014-06-15T00:00:00+01:00</updated>
    <id>Plough => Ruby/2014/06/15/ruby-puts-command</id>
    <content type="html"><![CDATA[<p>Ruby&#8217;s puts command will lead the &#8216;most used command&#8217; competition in the language. It&#8217;s probably the first command you run when you fire up irb, or write HelloWorld.rb. I have been using it from day 1, for debugging, printing out the progress of long running scripts and so on. I recently found couple of nifty things you can do with puts command:</p>

<ul>
<li>You can pass it multiple arguments and it will print them on the screen with a line break, for example:</li>
</ul>


<pre>
irb(main):001:0> puts "First", "day"
First
day
=> nil
</pre>


<ul>
<li>Secondly, you can pass it an array of elements, and it will print the elements with a line break, for example:</li>
</ul>


<pre>
irb(main):004:0> puts ["Second", "Day"]
Second
Day
=> nil
</pre>


<p>Hope you can use this to replace multiple calls to puts in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You want to be a programmer?]]></title>
    <link href="Plough => Ruby/2014/03/17/you-want-to-be-a-programmer%3F.html/&#8221;/>
    <updated>2014-03-17T00:00:00+00:00</updated>
    <id>Plough => Ruby/2014/03/17/you-want-to-be-a-programmer?</id>
    <content type="html"><![CDATA[<h3>But, you have no time</h3>


<p>No one has time!</p>

<p>The rise of billion dollar startups that get acquired in 6 months (or longer, perhaps) from launch gives a false impression that programming is easy, and hence shouldn’t take very long to learn. After all, you have a billion dollar idea you would like to start working on.</p>

<p>Let’s conduct a small study. Why don’t you spend an hour on StackOverflow? Why? To observe how users, without doing any research, ask the same questions over and over and over again. They just want to learn how this works, not why this works and not something else. I’m possibly guilty of the same mistakes, and I have been trying to amend them ever since.</p>

<h3>You need this</h3>


<p>As a result of these observations, and experience in teaching, I’ve come up up with a list of few qualities that can make you a better programmer:</p>

<ul>
<li><p>Learner - Learning never stops for a programmer and that’s the fun of it. You will have to spend extra hours every week to brush up your skills, gain new skills, and get better at your trade.</p></li>
<li><p>Committed - It’s not easy to become a programmer. It will require a lot of commitment, practice, and more programming, of course.</p></li>
<li><p>Investigative - You may end up spending days trying to fix a Javascript memory leak, or why your Rails app is running slow and leaking memory. It will require a lot of investigation, research and thinking about every aspect of the application, and it’s behaviour. You will have to read API documents, source code, and so on.</p></li>
</ul>


<p>All in all, it’s not going to be easy.</p>

<p>Now, do you still want to be a programmer?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abbreviation in Ruby]]></title>
    <link href="Plough => Ruby/2014/01/10/abbreviation-in-ruby.html/&#8221;/>
    <updated>2014-01-10T00:00:00+00:00</updated>
    <id>Plough => Ruby/2014/01/10/abbreviation-in-ruby</id>
    <content type="html"><![CDATA[<p>Ruby&#8217;s standard library is filled with several unique, non-standard classes/modules, one such module is <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/abbrev/rdoc/Abbrev.html">Abbrev</a>.</p>

<p>Abbrev calculates the set of unique abbreviations for a given set of strings. The following code demonstrates it properly:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'abbrev'
</span><span class='line'>require 'pp'
</span><span class='line'>
</span><span class='line'>pp Abbrev.abbrev(['ruby', 'rules'])</span></code></pre></td></tr></table></div></figure>


<p>This code produces the following output where all the keys are
abbreviated and unique, and point to their respective words.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"ruby"=&gt;"ruby",
</span><span class='line'> "rub"=&gt;"ruby",
</span><span class='line'> "rules"=&gt;"rules",
</span><span class='line'> "rule"=&gt;"rules",
</span><span class='line'> "rul"=&gt;"rules"}</span></code></pre></td></tr></table></div></figure>


<p>This also provides an extension for an Array, so you can call &#8216;abbrev&#8217;
method straight on an array. The code above will then become:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'abbrev'
</span><span class='line'>require 'pp'
</span><span class='line'>
</span><span class='line'>pp ['ruby', 'rules'].abbrev</span></code></pre></td></tr></table></div></figure>


<p>I found a couple of use cases of the Abbrev module on Google:</p>

<ol>
<li><p>For creating <a href="http://www.aimred.com/news/developers/2010/05/11/rediscovering_ruby_abbrev/">unique labels</a> for a bar graph.</p></li>
<li><p>For creating an <a href="http://endofline.wordpress.com/2010/12/25/ruby-standard-library-abbrev/">auto-completer</a> on console, intriguing, right?</p></li>
</ol>


<p>Hope this will make you aware of such a nifty module and please share your
use-cases with the rest of us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cryptic global variables in Ruby]]></title>
    <link href="Plough => Ruby/2014/01/07/cryptic-global-variables-in-ruby.html/&#8221;/>
    <updated>2014-01-07T00:00:00+00:00</updated>
    <id>Plough => Ruby/2014/01/07/cryptic-global-variables-in-ruby</id>
    <content type="html"><![CDATA[<p>Do you know what $! means in Ruby?</p>

<p>Years ago, I was discussing some issue regarding GemCutter (now that makes
it ancient in programming age), and we were talking about global
variables in Ruby, for example, $; and $/. At the time, we couldn&#8217;t
really find a place to look them up, even Google <a href="https://www.google.co.uk/search?q=%24!+Ruby&amp;oq=%24!+Ruby&amp;aqs=chrome..69i57.2487j0j7&amp;sourceid=chrome&amp;espv=210&amp;es_sm=91&amp;ie=UTF-8">isn&#8217;t very effective</a> given
the nature of the query.</p>

<p>Anyways, while looking through Ruby&#8217;s standard library, I found the file
<a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/English/rdoc/English.html">English.rb</a>.
This library has English names for all the cryptic global variables. For
example: $ERROR_INFO represents $!.</p>

<p>If you ever have to look up the English names, which I suggest you do as
it makes code easier to read, just refer to that file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested exceptions in Ruby 2.1.0]]></title>
    <link href="Plough => Ruby/2014/01/06/nested-exception-in-ruby-2.1.0.html/&#8221;/>
    <updated>2014-01-06T00:00:00+00:00</updated>
    <id>Plough => Ruby/2014/01/06/nested-exception-in-ruby-2.1.0</id>
    <content type="html"><![CDATA[<p>With Ruby 2.1.0, one can easily trace the original exception.
Previously, on rescuing an exception one would have no reference to the original exception
(thrown by a gem/library). There are a couple of <a href="https://github.com/skorks/nesty">gems</a> that can help you
keep track of the exceptions, but with Ruby 2.1.0 you can work with
nested exceptions without any issues. Here&#8217;s some trivial code to
achieve the same:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Car
</span><span class='line'>  def self.start
</span><span class='line'>    begin
</span><span class='line'>      1/0
</span><span class='line'>    rescue =&gt; ex
</span><span class='line'>      puts "Exception: #{ex}"
</span><span class='line'>      raise StandardError.new "Can't start the car"
</span><span class='line'>    end
</span><span class='line'>   end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>begin
</span><span class='line'>  Car.start
</span><span class='line'>rescue =&gt; ex
</span><span class='line'>  puts "Cause: #{ex.cause}"
</span><span class='line'>  puts "Exception: #{ex}"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This will produce the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Exception: divided by 0
</span><span class='line'>Cause: divided by 0
</span><span class='line'>Exception: Can't start the car</span></code></pre></td></tr></table></div></figure>


<p>You can <a href="https://eval.in/86466">play around</a> with the code yourself.
It&#8217;s not as sophisticated as the gems out there, but it&#8217;s getting there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect Oriented Programming]]></title>
    <link href="Plough => Ruby/2013/12/30/aspect-oriented-programming.html/&#8221;/>
    <updated>2013-12-30T00:00:00+00:00</updated>
    <id>Plough => Ruby/2013/12/30/aspect-oriented-programming</id>
    <content type="html"><![CDATA[<p>I was looking into Ruby&#8217;s <a href="http://www.ruby-doc.org/core-2.0.0/TracePoint.html">TracePoint</a> class recently. TracePoint is an objectified Kernel#set_trace_func method. TracePoint was
added in Ruby2, but before that there was a gem that had same function as TracePoint
class. Surprisingly, it was also called <a href="https://github.com/rubyunworks/tracepoint">tracepoint</a>.</p>

<p>Anyways, TracePoint is not the scope of this post. This post is all about AOP,
or Aspect Oriented Programming.</p>

<p>Wikipedia defines it as <em>&#8220;aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. AOP forms a basis for aspect-oriented software development.&#8221;</em></p>

<p>There are couple of things worth noting, Modularity and Cross-cutting concerns.</p>

<h3>Modularity</h3>

<p>In English, Modularity means based on modules, easily assembled, or repaired
and the reason it&#8217;s easily repaired is because modules are
self-contained and talk to each other via a defined interface. Interface
could be hardware pins, RAM slots, or intangible ones, defined in your
Ruby or Java class.</p>

<p>In Ruby world, modules and modularity is the go-to thing to achieve
separation of concern. You got a piece of code that is used in two
different places and has no state of its own, just create a
module to be included/extended or prepended.</p>

<h3>Cross-cutting concerns</h3>

<p>Cross-cutting concern can be defined as any piece of code that&#8217;s more widely
used across the application, for example, logging, security, or authentication, perhaps.
Something, like a before_filter in Rails controllers that&#8217;s applied to a set of actions.</p>

<p>There are libraries that one could use to achieve same and even more
than before_filter functionality outside of Rails. The one that I
briefly looked at is called
<a href="https://github.com/gcao/aspector">Aspector</a>. It provides a lot of examples
as well just in case you are stuck.</p>

<h3>Why not just use Ruby Modules?</h3>

<p>Ruby modules are similar but not exactly same as the AOP concept. One
important difference is that you can apply an aspect (aspect is the
piece of code with common functionality, like a module) to a class from
outside, without opening the class. Here&#8217;s some aspector code snippet to
elaborate the point:</p>

<pre>
TestAspect.apply A
</pre>


<p>Here A is the class, and TestAspect is the aspect. As you can see, you
can just apply it from outside. Sorry, not very clear, but I didn&#8217;t want
to tie the concept to a particular library implementation.</p>

<p>One good use case of using AOP concepts would be with something like
debugging, for example, a user performed an action and you want to check
the log for parameters that are getting passed in to methods, or what
methods are getting called when certain action is performed. But, that&#8217;s
what TracePoint does, right? Well, it definitely allows one to hook into
the events and print debugging information. With AOP, one can create
more focussed debugging. Imagine, a request going through Rails stack
will hit a lot of methods and you don&#8217;t want to enable tracing and then
having to go through a long console output.</p>

<p>These are just some of the initial thoughts I had on reading AOP and TracePoint.
Hope this post will encourage you to investigate and learn more about these topics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mina, the deployer]]></title>
    <link href="Plough => Ruby/2013/12/01/Mina-the-deployer.html/&#8221;/>
    <updated>2013-12-01T00:00:00+00:00</updated>
    <id>Plough => Ruby/2013/12/01/Mina-the-deployer</id>
    <content type="html"><![CDATA[<p>I recently decided to setup a dedicated website for my company as opposed to just using my personal one. It’s a static site, with barely any content right now.</p>

<p>Now, I usually rely on capistrano for deployment, but since capistrano had recently undergone a major facelift, I sensed it as an opportunity to try <a href="https://github.com/nadarei/mina">Mina</a>. I have known about the gem since it’s very beginning, but the pressures of modern web developer life means less time for playing around, and more for getting things done. In other words, don’t change the deployer, if it ain’t broken.</p>

<p>Mina is very similar to Capistrano, except one small yet pivotal fact. Instead of running commands one-by-one over SSH, it creates a bash script from your configuration and executes it remotely as one SSH command. Sounds astute to me. It has the same configuration and deploy setup as Capistrano, and anyone with some Capistrano experience will pick it up pretty quickly.</p>

<p>One thing that really stuck out for me and propelled me to write this post is it’s reliance on the existing SSH set-up on your machine. For example, in Capistrano, one has to explicitly set up the ssh forward agent in the deploy script itself. But, in Mina, one just needs to specify forward agent in their SSH config, and Mina will pick that up. It’s quite logical, no idea why it wasn’t the case for Capistrano.</p>

<p>Anyways, hope this will motivate you guys to try Mina as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DTrace probes in Ruby 2 and a startling discovery]]></title>
    <link href="Plough => Ruby/2013/04/10/dtrace-probes-in-ruby-2.html/&#8221;/>
    <updated>2013-04-10T00:00:00+01:00</updated>
    <id>Plough => Ruby/2013/04/10/dtrace-probes-in-ruby-2</id>
    <content type="html"><![CDATA[<p>DTrace is a static and dynamic instrumentation framework. I did a talk
at LRUG back in October on DTrace and it&#8217;s addition in Ruby 2. There&#8217;s
not much content in the presentation, but it will give you a little
pointers to the present situation of DTrace in general, and in Ruby.</p>

<p>The more I look into DTrace, the more I find it intriguing, challenging,
surprising, and yet thoroughly enjoyable. Recently, I was refactoring some
of the tests for a project, and the test suite takes forever to run,
therefore, I decided to use Object.new for creating an instance of the
interested object (stub the requests). Another colleague came along and
commented&#8230;&#8221;Oh, why are you not using OpenStruct&#8221;. OpenStruct is handy,
as it has a hash like structre, which means a method call that hasn&#8217;t
been stubbed or instantiated will just return nil, just like a hash call
when the key is absent from the hash.</p>

<p>I ran some quick benchmarks and here are the results:</p>

<pre>
Calculating -------------------------------------
         Struct.new       7341 i/100ms
         Object.new      57600 i/100ms
     OpenStruct.new       5462 i/100ms
-------------------------------------------------
         Struct.new     90353.5 (±10.0%) i/s -     447801 in   5.017170s
         Object.new   2335283.3 (±3.2%) i/s -   11692800 in   5.012149s
     OpenStruct.new     65014.7 (±4.9%) i/s -     327720 in   5.053209s
</pre>


<p>One thing is obvious, if you don&#8217;t need the dynamic nature of an
OpenStruct, just use Object.new. This led me to think, why Object.new is
superfast as compared to Struct or OpenStruct. I wanted to see what
method calls is Struct or OpenStruct making, you know, just for my own
knowledge. I decided to use DTrace for that purpose. DTrace has been
added to Ruby 2, but I still couldn&#8217;t find any documentation. However,
<a href="https://github.com/ruby/ruby/blob/trunk/probes.d">probes.d</a> file gives
a details of all the probe names, arguments in the probe and so on.
Please look at that file if you&#8217;d like to use DTrace with ruby.</p>

<p>I created a simple ruby file called <code>test.rb</code>, like this:</p>

<pre>
Object.new
</pre>


<p>and ran the following dtrace command on a Mac OS X:</p>

<pre>
sudo dtrace -c 'ruby test.rb' -Zn 'ruby*::method-entry { @[copyinstr(arg0)] = count(); }'
</pre>


<p>to receive the following output:</p>

<pre>
dtrace: description 'ruby*::method-entry ' matched 2 probes
dtrace: pid 14009 has exited

  Gem                                                              12
  Gem::Requirement                                                 23
  Gem::Version                                                     36
  Gem::Specification                                              267
  RbConfig                                                        309
</pre>


<p>Here column 1 is the Class name and the column 2 is the number of
times that class was accessed while running this ruby file. This was
quite surprising that RbConfig was accessed 309 times. Why? After much
thinking, I thought may be RVM has got a hand in this. I haven&#8217;t found a
solution yet.</p>

<p>I leave you here with this startling discovery and hope to solve
it for my next post. I&#8217;m planning to run the same dtrace command with
ruby installed via rbenv and see what I get and then go from there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStruct to hash]]></title>
    <link href="Plough => Ruby/2013/04/08/openstruct-to-hash.html/&#8221;/>
    <updated>2013-04-08T00:00:00+01:00</updated>
    <id>Plough => Ruby/2013/04/08/openstruct-to-hash</id>
    <content type="html"><![CDATA[<p>OpenStruct is a handy class in ruby&#8217;s stdlib. I&#8217;ve used it in the past
for creating test data, instead of using factory girl. It&#8217;s fast, and
the fact that it behaves like a Hash, makes it super easy for stubbing
object behaviours.</p>

<p>The other day, I had this requirement to convert an open struct instance
into a hash. I foolishly tried to_hash call, considering that it acts as
a hash, so there must be a to_hash call on it. But, unfortunately, there
isn&#8217;t any to_hash methods on OpenStruct. However, there are other ways
to convert an open struct instance to a hash quite easily. Here&#8217;s how:</p>

<h3>Option 1</h3>

<pre>
os = OpenStruct.new(:id => 12)
os.marshal_dump # returns the hash {:id=>12}
</pre>


<h3>Option 2</h3>

<pre>
os = OpenStruct.new(:id => 12)
os.instance_variable_get(:@table) # returns the hash {:id=>12}
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Ruby2, inspect independent of to_s]]></title>
    <link href="Plough => Ruby/2013/02/23/inspect-to_s-change-in-ruby2.html/&#8221;/>
    <updated>2013-02-23T00:00:00+00:00</updated>
    <id>Plough => Ruby/2013/02/23/inspect-to_s-change-in-ruby2</id>
    <content type="html"><![CDATA[<p><a href="http://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/">Ruby 2.0.0</a> has been released and there are a lot of new things, for example, keyword arguments, TracePoint API, DTrace and so on. Here&#8217;s <a href="https://github.com/ruby/ruby/blob/trunk/NEWS">Ruby NEWS</a> file, and some <a href="http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/">new features in Ruby 2</a>.</p>

<p>One thing to add to that list is that the behaviour of inspect is no
longer dependent on to_s. In Ruby 1.9, if to_s was overridden inspect
would just execute that code. But in Ruby 2.0, to_s overriding doesn&#8217;t
affect inspect anymore. Here&#8217;s code example for <a href="https://eval.in/11121">Ruby 1.9.3</a> and <a href="https://eval.in/11120">Ruby
2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing any Ruby source on your local machine with RVM]]></title>
    <link href="Plough => Ruby/2011/12/04/installing-any-ruby-source-on-your-local-machine-with-rvm.html/&#8221;/>
    <updated>2011-12-04T00:00:00+00:00</updated>
    <id>Plough => Ruby/2011/12/04/installing-any-ruby-source-on-your-local-machine-with-rvm</id>
    <content type="html"><![CDATA[<p>Update:
<em>This approach doesn&#8217;t work with the latest version of rvm (1.17.0
stable)</em></p>

<p>Now, if you are like me you probably have ruby source checked out on your machine to ensure that you stay informed with the newest features and ponder through the ruby source at will. I started wondering what if I want to install the ruby from the source and test my gems out and test it against well-known libraries to see how they fare. Firstly, I thought of doing the ./configure -> make -> make install dance but then I realised&#8230;yes you&#8217;re absolutely right, why not use <a href="https://github.com/wayneeseguin/rvm">RVM</a>.</p>

<p>What RVM? I must be out of mind.</p>

<p>But, hey, RVM downloads ruby source code and installs it on your machine. The only difference is that I have got the ruby source checked-out on my machine and I want to use that as the source. And yes, RVM is awesome. I have spoken to <a href="https://github.com/wayneeseguin">Wayne</a> (via IRC) and the man is an absolute genius, very polite and helpful.</p>

<p>So, somehow, I need to accomplish the following:</p>

<ul>
<li>Hey RVM, don&#8217;t download the ruby source.</li>
<li>Here&#8217;s the location of the ruby source, use that and install it.</li>
<li>Voila!</li>
</ul>


<p>But, how do I do that? I started looking at RVM source code and I am not an expert at bash scripting, so I figured why not just mail RVM mailing list. I got the following helpful response from <a href="https://github.com/mpapis">Micheal Papis</a>.</p>

<pre>
it's not yet supported to use sources/rubies provided by user, but it
will be in rvm 2.0

as for using it now, you could use $rvm_path/src - and provide your
sources there ... not sure how it will work, you have to experiment a
bit
</pre>


<p>That clue was enough for me and like he said, I experimented a little bit. When you run something like:</p>

<pre>
rvm install ruby-1.9.2
</pre>


<p>RVM downloads the source code into $rvm_path/repos, moves it over to $rvm_path/src and then does the configure, compile dance. I created a symlink in $rvm_path/repos pointing at the local ruby git repository on my machine. And, then I ran the install command. Here&#8217;s the output I get:</p>

<pre>
~/.rvm/src$ rvm install ruby-head
Installing Ruby from source to: /Users/andhapp/.rvm/rubies/ruby-head, this may take a while depending on your cpu(s)...

ruby-head - #fetching 
HEAD is now at 02035ba Merge branch 'trunk' of git://github.com/ruby/ruby into trunk

From github.com:andhapp/ruby
 * branch            trunk      -> FETCH_HEAD
Already up-to-date.
Copying from repo to src path...
ruby-head - #configuring 
ruby-head - #compiling 
ruby-head - #installing 
Retrieving rubygems-1.8.10
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  243k  100  243k    0     0   456k      0 --:--:-- --:--:-- --:--:--  540k

Extracting rubygems-1.8.10 ...
Removing old Rubygems files...
-e:1: Use RbConfig instead of obsolete and deprecated Config.
Installing rubygems-1.8.10 for ruby-head ...
Installation of rubygems completed successfully.
ruby-head - adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
ruby-head - #importing default gemsets (/Users/andhapp/.rvm/gemsets/)
Install of ruby-head - #complete 

</pre>


<p>This line &#8216;HEAD is now at 02035ba Merge branch &#8216;trunk&#8217; of git://github.com/ruby/ruby into trunk&#8217; is the last commit message on my local ruby git repository.</p>

<p>This line &#8216;From github.com:andhapp/ruby&#8217; reflects the fact that rvm is using my git repository and not ruby&#8217;s repository and updating the local source to the latest before installing.</p>

<p>I decided to call the ruby installation ruby-head. You can call it anything you fancy.</p>

<p>Here&#8217;s the version on my machine now:</p>

<pre>
~/.rvm/src$ rvm use ruby-head
Using /Users/andhapp/.rvm/gems/ruby-head
~/.rvm/src$ ruby -v
ruby 2.0.0dev (2011-12-03 trunk 33936) [x86_64-darwin10.8.0]
</pre>


<p>Awesome!</p>

<p>PS: I am sure there are other details about RVM&#8217;s installation procedure that I have missed out and Wayne or Micheal will be kind enough to enlighten me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inconsistent hashes]]></title>
    <link href="Plough => Ruby/2011/04/21/inconsistent-hashes.html/&#8221;/>
    <updated>2011-04-21T00:00:00+01:00</updated>
    <id>Plough => Ruby/2011/04/21/inconsistent-hashes</id>
    <content type="html"><![CDATA[<p>To clarify, hashes here does not mean the Hash class. Object&#8217;s in ruby have a hash method that returns a hash code for an object. The hash is also used in the background by the eql? method. So, it&#8217;s safe to say that two objects are equal if their hash methods return the same value.</p>

<p>Now, carry out a simple exercise and see what happens. Fire up an IRB session and run the following code, one by one:</p>

<pre>
    "test".hash
    1.hash
    [].hash
</pre>


<p>And note the output after every command run. Now, exit out of IRB and start a fresh session and run the same piece of code again. This time you will see the hash values have changed completely. This might be a bit surprising but it has been implemented in Ruby 1.9 for security reasons as it avoids one from guessing hash values. I picked this up from Ruby-core ML discussion and hope you find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Interesting Ruby Method]]></title>
    <link href="Plough => Ruby/2011/04/17/an-interesting-ruby-method.html/&#8221;/>
    <updated>2011-04-17T00:00:00+01:00</updated>
    <id>Plough => Ruby/2011/04/17/an-interesting-ruby-method</id>
    <content type="html"><![CDATA[<p>In this post, I will talk about a ruby method that I had no idea existed which might come handy in debugging your code.</p>

<p>The method I am talking about is <em>set_trace_func</em>. It&#8217;s part of the Kernel class and it does what it says. Allows one to set the method tracing on a method. The following snippet explains it further. Here, we have a class, TestingSetProcFunc:</p>

<pre>
    class TestingSetProcFunc
      def traceThisMethod
        source = 1
        target = 2
      end
    end
</pre>


<p>To inject set_trace_func in, it needs to be called before the method is invoked, like this:</p>

<pre>    
    puts "Event    File:Line                Id          Binding        Classname"
    set_trace_func proc { |event, file, line, id, binding, classname|
      printf "%8s %s:%-2d %20s %12s %8s\n", event, file, line, id, binding, classname
    }
</pre>


<p>It takes a proc with upto 6 arguments. These are the events with their brief descriptions:</p>

<ul>
<li>c-call (call a C-language routine)</li>
<li>c-return (return from a C-language routine)</li>
<li>call (call a Ruby method)</li>
<li>class (start a class or module definition)</li>
<li>end (finish a class or module definition)</li>
<li>line (execute code on a new line)</li>
<li>raise (raise an exception)</li>
<li>return (return from a Ruby method).</li>
</ul>


<p>Now, to run this we just need to call the method and look at the output:</p>

<pre>
    tracer = TestingSetProcFunc.new
    tracer.traceThisMethod
</pre>


<p>This is what the output will look like when you run it on the command line:</p>

<pre>    
Event    File:Line                Id          Binding        Classname
c-return test.rb:11       set_trace_func #<Binding:0x0b53c4>   Kernel
    line test.rb:13                      #<Binding:0x0b52fc>         
  c-call test.rb:13                  new #<Binding:0x0b525c>    Class
  c-call test.rb:13           initialize #<Binding:0x0b5144> BasicObject
c-return test.rb:13           initialize #<Binding:0x0b5090> BasicObject
c-return test.rb:13                  new #<Binding:0x0b4ff0>    Class
    line test.rb:14                      #<Binding:0x0b4f50>         
    call test.rb:2       traceThisMethod #<Binding:0x0b4eb0> TestingSetProcFunc
    line test.rb:3       traceThisMethod #<Binding:0x0b4dfc> TestingSetProcFunc
    line test.rb:4       traceThisMethod #<Binding:0x0b4d5c> TestingSetProcFunc
  return test.rb:5       traceThisMethod #<Binding:0x0b4cbc> TestingSetProcFunc    
</pre>


<p>This output gives one a good idea about the work that is happening in the background. The weird looking Binding instance is the context at that particular place in the code. I have just scratched the surface and I am sure there&#8217;s a lot one can do with this method. Have a look at the <a href="https://github.com/ruby/ruby/blob/trunk/test/ruby/test_settracefunc.rb">ruby&#8217;s test for set_trace_func</a> for more useful ways of employing it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Hacking Guide - Chapter 1]]></title>
    <link href="Plough => Ruby/2011/03/12/ruby-hacking-guide-chapter-1.html/&#8221;/>
    <updated>2011-03-12T00:00:00+00:00</updated>
    <id>Plough => Ruby/2011/03/12/ruby-hacking-guide-chapter-1</id>
    <content type="html"><![CDATA[<p>I have completed proof-reading and testing the code from old Ruby Hacking Guide and re-releases in the wild again. It still needs some styling work but I will hopefully find time to sort that out this week.</p>

<p>In the meantime, have a <a href="http://rubyhacking.andhapp.co.uk/2011/01/30/chapter-1.html">read through</a> and see if you spot any mistakes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free Ruby 1.9 Online Book]]></title>
    <link href="Plough => Ruby/2011/03/12/free-ruby-1.9-online-book.html/&#8221;/>
    <updated>2011-03-12T00:00:00+00:00</updated>
    <id>Plough => Ruby/2011/03/12/free-ruby-1.9-online-book</id>
    <content type="html"><![CDATA[<p>Just found this nicely done online book on <a href="http://ruby.runpaint.org/">Ruby 1.9</a>, in particular. It&#8217;s a must see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby File append mode]]></title>
    <link href="Plough => Ruby/2011/01/21/ruby-file-append-mode.html/&#8221;/>
    <updated>2011-01-21T00:00:00+00:00</updated>
    <id>Plough => Ruby/2011/01/21/ruby-file-append-mode</id>
    <content type="html"><![CDATA[<p>There are different file modes available to the developer when creating and opening new files in Ruby. One that I didn&#8217;t know about was &#8220;a&#8221; which basically means append to the end of the file rather than starting a new one. What could it be useful for? One example would be as a log file of some sort where one wants to preserve the old data and add new data to the end of the file. Very trivial but helpful if you know about these things. Just makes you a better developer.</p>

<p>A simple code example would be:</p>

<pre>
    file = File.new("datamapper.log", "a")  
</pre>

]]></content>
  </entry>
  
</feed>
